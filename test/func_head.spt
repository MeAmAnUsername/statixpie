module func_head

language statixpie

fixture [[
  module test:func:head
  
  func [[...]] = 0
]]

// function name
test missing name [[() -> int]] parse fails
test name lowercase letter [[a() -> int]]
test name uppercase letter [[B() -> int]]
test name normal name [[duplicate() -> int]]
test name with number [[const6() -> int]]
test name starts with number [[7foo() -> int]] parse fails
test name dash [[foo-bar() -> int]]
test name start with dash [[-bar() -> int]]
test name ends with dash [[bar-() -> int]]
test name underscore [[foo_bar() -> int]]
test name start with underscore [[_foo() -> int]]
test name ends with underscore [[foo_() -> int]]
test name everything [[-helloW0rld_I_am-a-function4() -> int]]

// function params
test missing brackets [[test -> int]] parse fails
test missing closing bracket [[test( -> int]] parse fails
test missing opening bracket [[test) -> int]] parse fails
test no params [[test() -> int]]
test one unnamed param [[test(int) -> int]]
test two unnamed params [[test(int, bool) -> int]]
test three unnamed params [[test(int, string, int) -> int]]
test one named param [[test(param: int) -> int]]
test two named params [[test(name: string, age: int) -> int]]
test three named params [[test(param: int) -> int]]
test unnamed, named params [[test(int, flag: bool) -> int]]
test named, unnamed params [[test(name: string, int) -> int]]
test param name missing name [[test(: int) -> int]] parse fails
test param name lowercase letter [[test(g: int) -> int]]
test param name uppercase letter [[test(Y: int) -> int]]
test param name word [[test(hello: int) -> int]]
test param name mixed case [[test(SarCaStIc: int) -> int]]
test param name with dash [[test(foo-bar: int) -> int]]
test param name starts with dash [[test(-fuz: int) -> int]]
test param name ends with dash [[test(fuz-: int) -> int]]
test param name starts with dash [[test(-fuz: int) -> int]]

// function output types
test missing return type [[test() -> ]] parse fails
test missing return type missing arrow [[test()]] parse fails
test missing arrow [[test() int]] parse fails
test return type typescript notation [[test(): int]] parse fails
test return type int [[test() -> int]]
test return type string [[test() -> string]]
test return type bool [[test() -> bool]]
test return type unit [[test() -> unit]]
test return type custom type [[test() -> CustomType]]
test return type tuple type [[test() -> (int, string)]]
// void is not a type in pie, but it is parsed as a custom data type
test return type void [[test() -> void]] parse succeeds
