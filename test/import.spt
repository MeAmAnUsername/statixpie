module import
language statixpie

fixture [[
  module test:import
  
  [[...]]
  
  data Foo = foreign java Foo {}
  func main() -> int = 0
]]

// simple imports without renaming.
// Note: simple tests use different names because of 
// duplicate name errors outside test region
test simple function import [[
  import test:import:[[foo]]
  func [[foo]]() -> int = 0
]] 2 errors at #1, #2
   resolve #1 to #2
   error like "Duplicate function" at #1
   error like "Duplicate function" at #2
test simple data import [[
  import test:import:[[Bar]]
  data [[Bar]] = foreign java Bar {}
]] 2 errors at #1, #2
   resolve #1 to #2
   error like "Duplicate definition" at #1
   error like "Duplicate definition" at #2
test simple import undefined submodule [[
  import [[example]]:main
]] analysis fails
   error like "Undefined submodule" at #1
test simple import undefined final element [[
  import test:import:[[nope]]
]] analysis fails
   error like "does not resolve" at #1

// simple imports with renaming
test simple renaming function import [[
  import test:import:[[main]] as [[func]]
  func test() -> int = [[func]]()
]] analysis succeeds
   resolve #1
   resolve #3 to #2
test simple renaming function duplicate name [[
  import test:import:main as [[func]]
  import test:import:main as [[func]]
]] 2 errors at #1, #2
   error like "Duplicate function" at #1
   error like "Duplicate function" at #2
test simple renaming data import [[
  import test:import:[[Foo]] as [[Bar]]
  func test(foo: [[Bar]]) -> int = 4
]] analysis succeeds
   resolve #1
   resolve #3 to #2
test simple renaming data duplicate name [[
  import test:import:Foo as [[Bar]]
  import test:import:Foo as [[Bar]]
]] 2 errors at #1, #2
   error like "Duplicate definition" at #1
   error like "Duplicate definition" at #2

/* todo:
   - test renaming to same name.
   - `import {foo, bar}:func` warning: no-op
   - `import example:foo as example:foo` warning: no-op
   - `import example:{foo as example:foo}` warning: no-op
   - `import example:{foo}` warning: multi-import with single element
*/
