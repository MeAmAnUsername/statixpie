module statics/module

imports

  statics/base
  statics/util

signature
  sorts
    ModuleTree
    MODULE

  constructors
    ModuleTreeRoot : list(scope) * list(ModuleTree) -> ModuleTree
    ModuleTreeNode : MODID * list(scope) * list(ModuleTree) -> ModuleTree
    MODULE : scope * list(MODID) -> MODULE

rules

  /**
   * declareWipModule(s_project, s_mod, Module(moduleList, name))
   * Declare a work in progress module [s_mod] named [name] in the relation
   * mod_wip. [name] is declared recursively nested in the modules of
   * [moduleList] starting in the root scope [s_project].
   * The module is work in progress because there can be multiple such
   * recursively nested modules, possibly with duplicate names.
   * The modules are deduplicated in statics/project.stx!projectOk.
   */
  declareWipModule : scope * scope * Module
  declareWipModule(s_project, s_mod, module) :-
    !mod_wip[MODULE(s_mod, moduleToList(module))] in s_project.

  /**
   * declareDeduplicatedModules(s_root)
   * Gets all declared work in progress modules (see
   * statics/module!declareWipModule), converts them to a module tree (without
   * duplicates) and then declares all the modules.
   */
  declareDeduplicatedModules : scope
  declareDeduplicatedModules(s) :- {occs}
    query mod_wip filter e in s |-> occs,
    declareModules(s, getWipModules(occs)).

  // todo: documentation
  getWipModule : (path * MODULE) -> MODULE
  getWipModules maps getWipModule(list(*)) = list(*)
  getWipModule((_, module)) = module.

  // todo: documentation
  declareModules : scope * list(MODULE)
  declareModules(s, modules) :- {tree}
//    try { false } | note $[DEBUG: declareModules - Declaring module tree in [s]: [modules] -> [tree]], // todo: remove
    createModuleTree(modules) == tree,
    declareModulesFromTree(s, tree).

  // todo: documentation
  createModuleTree : list(MODULE) -> ModuleTree
  createModuleTree(modules) = addAllToModuleTree(ModuleTreeRoot([], []), modules).

  /**
   * addAllToModuleTree(root_in, wip_modules) -> root_out
   * Add all wip modules [wip_modules] to module tree [root_in].
   * root_in is required to be a ModuleTreeRoot
   * All modules are deduplicated and added recursively.
   */
  addAllToModuleTree : ModuleTree * list(MODULE) -> ModuleTree
  addAllToModuleTree(node@ModuleTreeNode(_, _, _), _) = node :-
    false | error $[BUG: called addAllToModuleTree with a non-root node].
  addAllToModuleTree(root@ModuleTreeRoot(_, _), []) = root.
  addAllToModuleTree(root_1@ModuleTreeRoot(_, _), [occ|occs]) = root_3 :- {root_2}
    addToModuleTree(root_1, occ) == root_2,
    addAllToModuleTree(root_2, occs) == root_3.

  /**
   * addToModuleTree(root_in, wip_module_occurrence) -> root_out
   * Add module from [wip_module_occurrence] to module tree [root_in].
   * root_in is required to be a ModuleTreeRoot
   * The module is added recursively and deduplicated as necessary.
   */
  addToModuleTree : ModuleTree * MODULE -> ModuleTree
  addToModuleTree(node@ModuleTreeNode(_, _, _), _) = node :-
    false | error $[BUG: called addToModuleTree with a non-root node].
  addToModuleTree(ModuleTreeRoot(root_scopes, modules), MODULE(s_mod, [])) =
    ModuleTreeRoot([s_mod|root_scopes], modules).
  addToModuleTree(ModuleTreeRoot(root_scopes, modules), MODULE(s_mod, module@[_|_])) =
    result@ModuleTreeRoot(root_scopes, add_result@addToModuleTree_1(modules, module, s_mod)).
//    try {false} | note $[DEBUG: addToModuleTree - root_scopes: [root_scopes]; modules: [modules]; s_mod: [s_mod]; module: [module]; add_result: [add_result]; result: [result]]. // todo remove

    addToModuleTree_1 : list(ModuleTree) * list(MODID) * scope -> list(ModuleTree)
    addToModuleTree_1(mods, [], s_mod) = mods :- false | error "BUG: called addToModuleTree_1 with empty module name list".
    addToModuleTree_1([], [name], s_mod) =
      [ModuleTreeNode(name, [s_mod], [])].
    addToModuleTree_1([ModuleTreeNode(name, scopes, sub_modules)|modules], [name_node@name], s_mod) =
      [ModuleTreeNode(name_node, [s_mod|scopes], sub_modules)|modules].
    addToModuleTree_1([module@ModuleTreeNode(name', _, _)|modules], [name], s_mod) =
      [module|addToModuleTree_1(modules, [name], s_mod)] :- name' != name.
    addToModuleTree_1([], [name|names], s_mod) =
      [ModuleTreeNode(name, [], addToModuleTree_1([], names, s_mod))].
    addToModuleTree_1([ModuleTreeNode(name , scopes, sub_modules)|modules], [name|names], s_mod) =
      [ModuleTreeNode(name, scopes, addToModuleTree_1(sub_modules, names, s_mod))|modules].
    addToModuleTree_1([module@ModuleTreeNode(name', _, _)|modules], names@[name|_], s_mod) =
      [module|addToModuleTree_1(modules, names, s_mod)] :- name' != name.

  /**
   * declareModulesFromTree(s, tree)
   * Declares all modules in the tree with a new scope and adds a pointer to
   * the file scopes where applicible (see statics/module!instantiateModule).
   */
  declareModulesFromTree : scope * ModuleTree
  declareModulesFromTrees maps declareModulesFromTree(*, list(*))
  declareModulesFromTree(s, ModuleTreeRoot(root_scopes, sub_modules)) :- {s_tree_root}
    new s_tree_root,
    !root[getRoot(s)] in s_tree_root,
    s -MODULE_TREE_ROOT-> s_tree_root,
    declareModuleInstances(s_tree_root, root_scopes),
    declareModulesFromTrees(s_tree_root, sub_modules).
  declareModulesFromTree(s, ModuleTreeNode(name, scopes, sub_modules)) :- {s_mod_tree}
    new s_mod_tree,
    !root[getRoot(s)] in s_mod_tree,
    declareModule(s, name, s_mod_tree),
    setContext(s_mod_tree, "module_name_simple", ContextName(name)),
    declareModuleInstances(s_mod_tree, scopes),
    declareModulesFromTrees(s_mod_tree, sub_modules),
    declareModulesFromTree_1(scopes).

    // give duplicate name error if list has more than one element
    declareModulesFromTree_1 : list(scope)
    declareModulesFromTree_1([]).
    declareModulesFromTree_1([_]).
    declareModulesFromTree_1(scopes@[_, _|_]) :-
      declareModulesFromTree_2s(scopes, scopes).

    // give an error on name of s_mod and set references to all other names from scopes in list
    declareModulesFromTree_2 : scope * list(scope)
    declareModulesFromTree_2s maps declareModulesFromTree_2(list(*), *)
    declareModulesFromTree_2(s_mod, scopes) :- {module module_pp name}
      getContext(s_mod, "module_name_qualified") == ContextModule(module) | error $[BUG: cannot get qualified module name from [s_mod]],
      moduleToList(module) == module_pp,
      false | error $[Duplicate module [module_pp]. Ctrl/Cmd + click on [name] to go to duplicate definition.] @module,
      getContext(s_mod, "module_name_simple") == ContextName(name) | error $[BUG: cannot get simple module name from [s_mod]],
      declareModulesFromTree_3s(declareModulesFromTree_4(scopes, s_mod), name).

    // set a reference from name to s_cur
    declareModulesFromTree_3 : scope * string
    declareModulesFromTree_3s maps declareModulesFromTree_3(list(*), *)
    declareModulesFromTree_3(s_cur, ref_name) :- {cur_name}
      getContext(s_cur, "module_name_simple") == ContextName(cur_name) | error $[BUG: cannot get module name from [s_cur]],
      @ref_name.ref := cur_name.

    // filter scope from list of scopes
    // assumes that scope only occurs once.
    declareModulesFromTree_4 : list(scope) * scope -> list(scope)
    declareModulesFromTree_4([], _) = [].
    declareModulesFromTree_4([s_mod|rest], s_mod) = rest.
    declareModulesFromTree_4([s    |rest], s_mod) = [s|declareModulesFromTree_4(rest, s_mod)] :-
      s != s_mod.

  /**
   * declareModule(s, name, s_mod)
   * Declare a module [s_mod] named [name] in scope [s].
   */
  declareModule : scope * MODID * scope
  declareModule(s, name, s_mod) :-
    !mod[name, s_mod] in s,
    resolveModuleOpt(s, name) == [s_mod]
      | error $[BUG: duplicate definitions for module [name] in [s]].

  /**
   * instantiateModule(s_mod_tree, s_mod_file)
   * Instantiate module [s_mod_file] by adding a MOD_INSTANCE edge to
   * [s_mod_tree].
   */
  declareModuleInstance : scope * scope
  declareModuleInstances maps declareModuleInstance(*, list(*))
  declareModuleInstance(s_mod_tree, s_mod_file) :-
    s_mod_tree -FILE-> s_mod_file.

   /**
    * getModuleName(s_mod) -> name
    * Get the simple name of a module from its scope.
    * Works with both module tree scopes as module file scopes.
    */ 
  getModuleName : scope -> MODID
  getModuleName(s_mod) = name :-
    getContext(s_mod, "module_name_simple") == ContextName(name)
      | error $[BUG: cannot get module name in [s_mod]].

  /**
   * resolveModuleListToFile(s, moduleList) = s_tree
   * Resolve the modules from the ModuleList [moduleList] and return the module
   * file scope [s_file] of the last module in the list.
   * This function will also resolve pseudo modules defined by imports.
   * Also sets references on the names in the moduleList to files, if
   * such files exist. (example: given foo:bar:baz, it points foo to a file foo
   * if it exists and bar to a file foo:bar if it exists)
   */
  resolveModuleListToFile : scope * ModuleList -> scope
  resolveModuleListToFile(s, NoModuleList()) = s.
  resolveModuleListToFile(s, moduleList@ModuleList(mods)) =
    moduleTreeScopeToFile(resolveModuleList(s, moduleList, TRUE()), getLast(mods)).

  /**
   * moduleTreeScopeToFile(
   * todo
   */
  moduleTreeScopeToFile : scope * MODID -> scope
  moduleTreeScopeToFile(s_mod_tree, name_node) = s_mod_file :- {file_scopes name}
//    try {false} | note $[DEBUG: moduleTreeScopeToFile - s_mod_tree: [s_mod_tree]; name_node: [name_node]; file_scopes: [file_scopes]; name: [name]; s_mod_file: [s_mod_file]], // todo remove
    moduleTreeScopeToFiles(s_mod_tree, name_node) == file_scopes,
    getModuleName(s_mod_tree) == name,
    file_scopes == [s_mod_file|_] | error $[Submodule [name] is not instantiated] @name_node,
    try { file_scopes != [_,_|_] } | error $[Duplicate module [name]] @name_node.

  // todo: documentation  
  moduleTreeScopeToFiles : scope * MODID -> list(scope)
  moduleTreeScopesToFiles_1 maps moduleTreeScopeToFiles(list(*), *) = list(*)
  moduleTreeScopeToFiles(s_mod_tree, name_node) = result@getScopes(occs) :-
//    try {false} | note $[DEBUG: moduleTreeScopeToFiles - s_mod_tree: [s_mod_tree]; name_node: [name_node]; occs: [occs]; result: [result]], // todo remove
    query () filter FILE in s_mod_tree |-> occs.

  // todo: documentation  
  moduleTreeScopesToFiles : list(scope) * MODID -> list(scope)
  moduleTreeScopesToFiles(tree_scopes, name) = flattenScopeList(moduleTreeScopesToFiles_1(tree_scopes, name)).

  /**
   * resolveModuleList(s, moduleList, follow_imports) = s_mod_tree
   * Resolve the modules from the ModuleList [moduleList] and return the module
   * tree scope [s_mod_tree] of the last module in the list.
   * If follow_imports is TRUE() it will follow pseudomodules declared by
   * imports, otherwise not (and only resolve modules at the root scope)
   * Also sets references on the names in the moduleList to files, if
   * such files exist. (example: given foo:bar:baz, it points foo to a file foo
   * if it exists and bar to a file foo:bar if it exists)
   */
  resolveModuleList : scope * ModuleList * BOOLEAN -> scope
  resolveModuleList(s, NoModuleList(), _) = s.
  resolveModuleList(s, ModuleList([]), _) = s :- try {false} | note "BUG?: called resolveModuleList with empty ModuleList".
  resolveModuleList(s, module@ModuleList(mods@[name|_]), follow_imports) =
    result@resolveModuleList_1(tree_roots@getModuleTreeRoots(s, follow_imports), mods, name, module) :-
    try {false} | note $[DEBUG: resolveModuleList - s: [s]; module: [module]; mods: [mods]; name: [name]; follow_imports: [follow_imports], tree_roots: [tree_roots]; result: [result]]. // todo: remove

    // gets the roots of all module trees reachable from s (should be root and file module tree)
    getModuleTreeRoots : scope * BOOLEAN -> list(scope)
    getModuleTreeRoots(s, TRUE()) = result@getModuleTreeRoots_1s([root@getRoot(s)|file@getFileIfExists(s)]).
//      try {false} | note $[DEBUG: getModuleTreeRoots - s: [s]; follow_imports: TRUE(); root: [root]; file: [file]; result: [result]]. // todo: remove
    getModuleTreeRoots(s, FALSE()) = result@[getModuleTreeRoots_1(root@getRoot(s))].
//      try {false} | note $[DEBUG: getModuleTreeRoots - s: [s]; follow_imports: FALSE(); root: [root]; result: [result]]. // todo: remove

      // resolve module tree root scope from root / file scope
      getModuleTreeRoots_1 : scope -> scope
      getModuleTreeRoots_1s maps getModuleTreeRoots_1(list(*)) = list(*)
      getModuleTreeRoots_1(s) = s_module_tree_root :-
        query () filter MODULE_TREE_ROOT in s |-> [(_, s_module_tree_root)].

    resolveModuleList_1 : list(scope) * list(MODID) * MODID * ModuleList -> scope
    resolveModuleList_1([], _, last_name, module) = none :- false | error $[Undefined submodule [last_name] in [module]].
    resolveModuleList_1(scopes, [], _, module) = resolveModuleList_2(scopes, module).
    resolveModuleList_1(scopes, [name|names], last_name, module) =
      result@resolveModuleList_1(next_scopes@flattenScopeList(resolveModulesOpt(scopes, name)), names, last_name, module) :-
      try {false} | note $[DEBUG: resolveModuleList_1 - scopes: [scopes]; name: [name]; names: [names]; last_name: [last_name]; module: [module]; next_scopes: [next_scopes]; result: [result]], // todo: remove
      addFileReferences(next_scopes, name).

    resolveModuleList_2 : list(scope) * ModuleList -> scope
    resolveModuleList_2([], module) = none :- false | error "BUG: called resolveModuleList_2 with empty list (should have been caught by `resolveModuleList_1([], _, last_name, module)`)" @module.
    resolveModuleList_2([s], _) = s.
    resolveModuleList_2([s|rest@[s|_]], module) = resolveModuleList_2(rest, module).
    resolveModuleList_2([s,s'|_], module) = none :- false | error $[[module] resolved to different scopes].

  // todo: documentation
  // flattens a nested list of scopes. Gives an error if any list contains more than 1 element.
  flattenScopeList : list(list(scope)) -> list(scope)
  flattenScopeList([]) = [].
  flattenScopeList([list|lists]) = concatScopes(list, flattenScopeList(lists)).

    // concatenates two lists of scopes. Gives an error if the first list contains more than 1 element.
    concatScopes : list(scope) * list(scope) -> list(scope)
    concatScopes([], scopes) = scopes.
    concatScopes([s], scopes) = [s|scopes].
    concatScopes([s|rest@[_|_]], scopes) = [s|concatScopes(rest, scopes)] :- false | error "BUG: resolved multiple scopes".

  // todo: documentation
  addFileReference : scope * MODID
  addFileReferences maps addFileReference(list(*), *)
  addFileReference(s_mod_tree, name_node) :- {instance_occs}
    // todo: delegate to moduleTreeScopeToFiles?
    query () filter FILE in s_mod_tree |-> instance_occs,
    addRefs(instance_occs, name_node).

    // adds references to files if file exists
    addRef : (path * scope) * MODID
    addRefs maps addRef(list(*), *)
    addRef((_, s), ref_name) :- {orig_name}
//      try {false} | note $[DEBUG: addRef - s: [s]; ref_name: [ref_name]; orig_name: [orig_name]] @ref_name, // todo: remove
      getContext(s, "module_name_simple") == ContextName(orig_name),
      @ref_name.ref := orig_name.

  // todo: documentation
  resolveModuleOpt : scope * MODID -> list(scope)
  resolveModulesOpt maps resolveModuleOpt(list(*), *) = list(*)
  resolveModuleOpt(s, name) = result@getModules(occs) :-
    try {false} | note $[DEBUG: resolveModuleOpt - s: [s]; name: [name]; occs: [occs]; result: [result]], // todo: remove
    query mod filter e and {name' :- name' == name} in s |-> occs.

    // get the module from an occurrence
    getModule : (path * (MODID * scope)) -> scope
    getModules maps getModule(list(*)) = list(*)
    getModule((_, (_, s_mod))) = s_mod.
