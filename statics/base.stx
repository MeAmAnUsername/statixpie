module statics/base

imports

  signatures/lex/literal-sig
  signatures/statixpie-sig
  statics/util
  statics/type

signature
  sorts
    TYPE // A semantic type (as opposed to the lexical, non-all caps Type)
    ValKind // The kind of a value. Used by code generation.
    BOOLEAN // For logic in this statix spec.
    ModuleTree // For constructing the tree of modules

  relations
    mod_wip : MODID -> (scope * Module)
    mod : MODID -> scope
    val : VALID -> TYPE
    func : FUNCID -> TYPE
    data : TYPEID -> scope
    context : string -> TYPE

  constructors
    InputValKind : ValKind
    LocalValKind : ValKind
    TRUE : BOOLEAN
    FALSE : BOOLEAN
    ModuleTreeNode : MODID * list(scope) * list(ModuleTree) -> ModuleTree

signature
  name-resolution
    labels
      P // Scopes within functions; function scope to file scope.
      INHERIT // Between data scopes
      ROOT // file scope to root scope. Root scope is the project scope.

rules // Logic functions

  /**
   * Logical and. Called andB because `and` is apparently a keyword.
   */
  andB : BOOLEAN * BOOLEAN -> BOOLEAN
  andB(FALSE(), _) = FALSE().
  andB(_, FALSE()) = FALSE().
  andB(TRUE(), TRUE()) = TRUE().
  andB(a, b) = FALSE() :- false | error $[Bug in Statix spec: no matching rule for andB([a], [b]).].
  
  /**
   * return TRUE() if all values in the list are TRUE().
   */
  allTrue : list(BOOLEAN) -> BOOLEAN
  allTrue([]) = TRUE().
  allTrue([FALSE()|_]) = FALSE().
  allTrue([TRUE()|rest]) = allTrue(rest).

  orB : BOOLEAN * BOOLEAN -> BOOLEAN
  orB(TRUE(), _) = TRUE().
  orB(_, TRUE()) = TRUE().
  orB(FALSE(), FALSE()) = FALSE().
  orB(a, b) = FALSE() :- false | error $[Bug in Statix spec: no matching rule for orB([a], [b]).].
  
  notB : BOOLEAN -> BOOLEAN
  notB(TRUE()) = FALSE().
  notB(FALSE()) = TRUE().

rules // Declararing and resolving

  /**
   * declareWipModule(s_project, s_mod, Module(moduleList, name))
   * Declare a work in progress module [s_mod] named [name] in the relation
   * mod_wip. [name] is declared recursively nested in the modules of
   * [moduleList] starting in the root scope [s_project].
   * The module is work in progress because there can be multiple such
   * recursively nested modules, possibly with duplicate names.
   * The modules are deduplicated in statics/project.stx!projectOk.
   */
  declareWipModule : scope * scope * Module
  declareWipModule(s_project, s_mod, module@Module(_, name)) :-
    !mod_wip[name, (s_mod, module)] in s_project.

  declareDeduplicatedModules : scope
  declareDeduplicatedModules(s) :- {occs modules}
    query mod_wip filter e in s |-> occs,
    addAllToModuleTree([], occs) == modules,
    declareModulesFromTrees(s, modules).

  addAllToModuleTree : list(ModuleTree) * list((path * (string * (scope * Module)))) -> list(ModuleTree)
  addAllToModuleTree(modules, []) = modules.
  addAllToModuleTree(modules_1, [occ|occs]) = modules_3 :- {modules_2}
    addToModuleTree(modules_1, occ) == modules_2,
    addAllToModuleTree(modules_2, occs) == modules_3.

  addToModuleTree : list(ModuleTree) * (path * (string * (scope * Module))) -> list(ModuleTree)
  addToModuleTree(modules, (_, (_, (s_mod, module)))) =
    addToModuleTree_1(modules, moduleToList(module), s_mod).

    addToModuleTree_1 : list(ModuleTree) * list(MODID) * scope -> list(ModuleTree)
    addToModuleTree_1(_, [], s_mod) = [] :- false | error "BUG: called addToModuleTree_1 with empty module name list".
    addToModuleTree_1([], [name], s_mod) =
      [ModuleTreeNode(name, [s_mod], [])].
    addToModuleTree_1([ModuleTreeNode(name, scopes, sub_modules)|modules], [name], s_mod) =
      [ModuleTreeNode(name, [s_mod|scopes], sub_modules)|modules].
    addToModuleTree_1([module@ModuleTreeNode(name', _, _)|modules], [name], s_mod) =
      [module|addToModuleTree_1(modules, [name], s_mod)] :- name' != name.
    addToModuleTree_1([], [name|names], s_mod) =
      [ModuleTreeNode(name, [], addToModuleTree_1([], names, s_mod))].
    addToModuleTree_1([ModuleTreeNode(name , scopes, sub_modules)|modules], [name|names], s_mod) =
      [ModuleTreeNode(name, scopes, addToModuleTree_1(sub_modules, names, s_mod))|modules].
    addToModuleTree_1([module@ModuleTreeNode(name', _, _)|modules], names@[name|_], s_mod) =
      [module|addToModuleTree_1(modules, names, s_mod)] :- name' != name.

  declareModulesFromTree : scope * ModuleTree
  declareModulesFromTrees maps declareModulesFromTree(*, list(*))
  declareModulesFromTree(s, ModuleTreeNode(name, [], sub_modules)) :- {s_mod}
    new s_mod,
    declareModule(s, name, s_mod),
    declareModulesFromTrees(s_mod, sub_modules).
  declareModulesFromTree(s, ModuleTreeNode(name, [s_mod], sub_modules)) :-
    declareModule(s, name, s_mod),
    declareModulesFromTrees(s_mod, sub_modules).
  declareModulesFromTree(s, ModuleTreeNode(name, s_mods@[s_mod|[_|_]], sub_modules)) :-
    declareModules(s, name, s_mods),
    declareModulesFromTrees(s_mod, sub_modules),
    false | error $[Duplicate module] @name.

  declareModule : scope * MODID * scope
  declareModules maps declareModule(*, *, list(*))
  declareModule(s, name, s_mod) :-
    !mod[name, s_mod] in s.
  

  resolveModuleList : scope * ModuleList -> scope
  resolveModuleList(s, NoModuleList()) = s.

  /**
   * Declare a value [name] with type [TYPE] and ValKind [kind] in scope [s]
   */
  declareVal : scope * string * TYPE * ValKind
  declareVal(s, name, type, kind) :-
    {occs} // todo: remove
//    try { false } | note $[Declare val [name] in [s]: occs=[occs]], // todo: remove
    !val[name, type] in s,
    @name.kind := kind,
    occs@resolveVal(s, name) == [_]
      | error $[Duplicate definition of value [name]],
    @name.type := type.

  /**
   * Resolve a value [name] in scope [s]
   */
  resolveVal : scope * string -> list((path * (string * TYPE)))
  resolveVal(s, name) = occs :-
//    try { false } | note $[Resolve val [name] in [s]: occs=[occs]], // todo: remove
    query val
      filter P*
         and { name' :- name' == name }
         min $ < P
         and false 
          in s |-> occs.

  resolveUniqueVal : scope * string -> TYPE
  resolveUniqueVal(s, name) = ty :- {occs name'}
    resolveVal(s, name) == occs,
    occs == [(_, (name', ty))],
    @name.ref := name',
    @name.type := ty,
    // If there are multiple, the declaration will give an error.
    try { occs != [] } | error $[Cannot resolve [name]] @name.


  /**
   * Declare a function [name] with type [TYPE] in scope [s]
   */
  declareFunc : scope * string * TYPE
  declareFunc(s, name, type) :-
    {occs} // todo: remove
//    try { false } | note $[Declare func [name] in [s]: occs=[occs]], // todo: remove
    !func[name, type] in s,
    occs@resolveFunc(s, name) == [_]
      | error $[Duplicate definition of function [name]],
    @name.type := type.

  /**
   * Resolve a function [name] in scope [s]
   */
  resolveFunc : scope * string -> list((path * (string * TYPE)))
  resolveFunc(s, name) = occs :-
    query func
      filter P*|INHERIT*
         and { name' :- name' == name }
         min $ < P, $ < INHERIT
         and true // todo: set to false to implement overloading between classes
          in s |-> occs.

  /**
   * resolve a function [name] to a unique declaration in scope [s]
   */
  resolveUniqueFunc : scope * string -> TYPE
  resolveUniqueFunc(s, name) = ty :- {occs name'}
    resolveFunc(s, name) == occs,
    occs == [(_, (name', ty))],
    @name.ref := name',
    @name.type := ty,
    // If there are multiple, the declaration will give an error.
    try { occs != [] } | error $[Could not resolve function [name]] @name.


  /**
   * Declare a datatype [name] with scope [s_data] in scope [s]
   */
  declareData : scope * string * scope
  declareData(s, name, s_data) :-
    {occs} // todo: remove
//    try { false } | note $[Declare func [name] in [s]: occs=[occs]], // todo: remove
    !data[name, s_data] in s,
    occs@resolveData(s, name) == [_]
      | error $[Duplicate definition of Datatype [name]],
    @name.type := DataType(s_data).

  /**
   * Resolve data [name] in scope [s] to a list of data scopes
   */
  resolveData : scope * string -> list((path * (string * scope)))
  resolveData(s, name) = occs :-
    query data
      filter P*
         and { name' :- name' == name }
         min $ < P
         and false
          in s |-> occs.

  /**
   * resolve data [name] to a unique data scope [s_data] in scope [s]
   */
  resolveUniqueData : scope * string -> scope
  resolveUniqueData(s, name) = s_data :- {occs name'}
    resolveData(s, name) == occs,
    occs == [(_, (name', s_data))],
    @name.ref := name',
    @name.type := DataType(s_data),
    // If there are multiple, the declaration will give an error.
    try { occs != [] } | error $[Could not resolve data [name]] @name.


  setContextType : scope * string * TYPE
  setContextType(s, name, ty) :-
    !context[name, ty] in s,
    true. // todo
//    getContextType(s, name) == _
//      | error $[Context value [name] is already set in [s]].

  getContextType : scope * string -> TYPE
  getContextType(s, name) = ty :- {occs}
    query context
      filter P*
         and { name' :- name' == name }
         min $ < P
         and true
          in s |-> occs,
    occs == [(_, (_, ty))],
    try { occs != [] } | error $[cannot get context value [name] in [s]].
