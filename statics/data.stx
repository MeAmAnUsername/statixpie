module statics/data

imports

  signatures/data-sig
  statics/base
  statics/type
  statics/func_def

rules

  dataDefOk : scope * DataDef
  dataDefOk(s, DataDef(DataDefMods(mods), name, super, impl)) :- {s_data}
    new s_data,
    declareData(s, name, s_data),
    @name.mods := mods,
    superOk(s, s_data, super),
    dataImplOk(s, s_data, impl).

  superOk : scope * scope * SuperType
  superOk(s, s_data, NoSuperType()).
  superOk(s, s_data, SuperType(data_ty)) :- {s_super}
    typeOfDataTy(s, data_ty) == DataType(s_super),
    s_data -INHERIT-> s_super.
    // todo: check that all functions in s_data are subtypes of functions in s_super
  
  dataImplOk : scope * scope * DataImpl
  dataImplOk(s, s_data, JavaDataImpl(java_name, members)) :-
    javaDataMembersOk(s, s_data, members).
  
  javaDataMemberOk : scope * scope * JavaDataMemb
  javaDataMembersOk maps javaDataMemberOk(*, *, list(*))
  javaDataMemberOk(s, s_data, JavaFuncDef(func_head)) :- {name ty}
    typeOfFuncHead(s, func_head) == (_, name, ty),
    declareFunc(s_data, name, ty).