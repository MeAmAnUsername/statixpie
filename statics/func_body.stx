module statics/func_body

imports

  signatures/func_body-sig
  statics/base
  statics/type
  statics/util
  statics/binder

rules

  typeOfExp     : scope * Exp -> TYPE
  typeOfExpImpl : scope * Exp -> TYPE
  typeOfExps maps typeOfExp(*, list(*)) = list(*)
  
  typeOfExp(s, exp) = ty@typeOfExpImpl(s, exp) :-
    @exp.type := ty.

// Blocks

  typeOfExpImpl(s, Block2Exp(b@Block(exps))) = ty :- {s_block}
    new s_block,
    s_block -P-> s,
    typeOfBlockExps(s_block, exps) == ty,
    @b.type := ty.

  typeOfBlockExps : scope * list(Exp) -> TYPE
  typeOfBlockExps(s, [exp | exps@[_|_]]) = ty :-
    typeOfExp(s, exp) == _,
    typeOfBlockExps(s, exps) == ty.

  typeOfBlockExps(s, [exp | []]) = ty :-
    typeOfExp(s, exp) == ty.

// Control flow

  typeOfExpImpl(s, IfElse(exp_cond, exp_true, exp_false)) = ty :- {ty_cond ty_true ty_false}
    expectSubtype(s, exp_cond, BoolType()),
    typeOfExp(s, exp_true) == ty_true,
    typeOfExp(s, exp_false) == ty_false,
    lub(ty_true, ty_false) == ty,
    try { ty != TopType() } | warning $[Type mismatch: true branch ([ty_true]) and false branch ([ty_false]) combine to the top type. Are you sure?].

// literals

  typeOfExpImpl(s, BoolLit(_)) = BoolType().
  typeOfExpImpl(s, IntLit(_))  = IntType().
