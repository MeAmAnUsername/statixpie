module statics/binder

imports

  signatures/func_body-sig
  statics/base
  statics/type

rules

  /**
   * type of a binder in scope [s] with type of the assignment expression [ty_exp]
   */
  typeOfBinder : scope * TYPE * Binder -> TYPE
  typeOfBinder(s, ty_exp, SingleBinder(bind)) = typeOfBind(s, ty_exp, bind).
  typeOfBinder(s, ty_exp, t@TupleBinder(binds)) = ty_dec :- {tys_exp tys_dec}
    ty_exp == TupleType(tys_exp) | error $[Type mismatch: expected tuple type, got [ty_exp]] @t,
    ty_dec == TupleType(tys_dec) | error $[Type mismatch: expected tuple type, got [ty_dec]] @t,
    typeOfBinds(s, tys_exp, binds) == tys_dec.
  
  /**
   * type of a bind in scope [s] with type of the assignment expression [exp_ty]
   */
  typeOfBind : scope * TYPE * Bind -> TYPE
  typeOfBinds maps typeOfBind(*, list(*), list(*)) = list(*)

  typeOfBind(s, exp_ty, Bind(name)) = exp_ty :-
    declareVal(s, name, exp_ty, LocalValKind()).
  
  typeOfBind(s, actual_ty, TBind(name, expected_ty_exp)) = expected_ty :-
    typeOf(s, expected_ty_exp) == expected_ty,
    declareVal(s, name, expected_ty, LocalValKind()),
    subtype(actual_ty, expected_ty) | error $[Type mismatch: expected [expected_ty], got [actual_ty]] @expected_ty_exp.
